shell
    # for loop
    for i in {1..100} 
    do  
        echo $i  
    done  

    # get arguments
    arg1=$1
    arg2=$2

	# block comment
	:<<commentMark
		comment body
	commentMark

vim
	#substitute
	:%s/A/B/g		#substitute string A to string B

c++     
    //for loop
    for (int i=0; i<n; ++i){
        printf("%d\n", i);
    }

    
    //start index
    0


	//opencv 

		//change type	
		Mat B;
		A.convertTo(B,CV_8UC1);

	// bound for set, multiset, map, multimap
	lower_bound(val) return iter >= val
	upper_bounder(val) return iter > val

	// clear
		string vector
	// non clear


	//algorithm
	equal(a.begin(), a.end(), b.begin());
	lower_bound(a.begin(), a.end(), val);
	upper_bound(a.begin(), a.end(), val);

	//stack
		void push(T);
		void pop();
		T top();
	//queue
		T front();
		T back();
		void push(T);
		void pop()
	//string
		int atoi(str, pos, base)
		long atol(str, pos, base)
		long long atoll(str, pos, base)
		
		string to_string(int | long | long long | float| double |...)
	//sort
		struct cmp{
			vector<int> *a;
			cmp(vector<int> &a){
				this->a = &a;
			}
			bool operator()(int i, int j)const{
				return (*a)[i] < (*a)[j];
			}
		}
		vector<int> a;
		vecotr<int> idx;
		sort(idx.begin(), idx.end(), cmp(a));

	//opencv		
		#include <opencv2/core/core.hpp>
		#include <opencv2/highgui/highgui.hpp>
		#include <opencv2/imgproc/imgproc.hpp>
		using namespace cv;

python  
    # for loop
    for i in xrange(n): 
        print(i)


    # start index
    0


    # read file
    f = open(fileName)
    for line in f:
        print(line)


    # function
    def func(parameter):
        print(parameter)



    # string lib
    ['s', 'df'] = 's df'.split(' ')
    1 = 'sfds'.find('fd')    


	#travel folder recursively
	for parent, dirnames, filenames in os.walk(folder):


	#file copy, remove, move and create symbolic link
	shutil.copyfile(src, dst)
	os.remove(fullFilename)
	os.rename(srcFullFilename, dstFullFilename)
		# cannot move file between different device		
	os.symlink(src, dstLink)



	# sort list
	x = [1, 3, 2]
	x = sorted(x)	# then x = [1, 2, 3]
	

	#join path
	os.path.join('dir', 'filename')


	#file exist
	os.path.isfile(filename)


	#regard function as attribute
	@property
	class Person(object):
		def __int__(self):
			self._money = 100

		def money(self):
			return self._money

	person = Person()
	print(person.money)


    # dimention
    npObj.shape

    # block comment
    '''
        block
    '''

	# process xml
	import xml.etree.ElementTree as ET
	tree = ET.parse(filename)
	root = tree.getroot()
	for elem in root.findall('object')
		if elem.find('name') == 'ignore':
			root.remove(elem)
	tree.write(detFilename)

	# copy
	import copy
	class f:
		x = 1
	l = [f(), f()]
	a = copy.copy(l)
	b = copy.deepcopy(l)
	b[0].x = 2		# b = [x = 2, x = 1]	l = [x = 1, x = 1] # deep
	a[0].x = 3 		# a = [x = 3, x = 1]	l = [x = 3, x = 1] # shallow

lua 
    --for loop
    for i = 1,n do
        print(i)
    end


    --start index 
    1


    --read file
    for line in io.lines(fileName) do 
        print(line)
    end

    --write file


    --function
    function func(parameter)
        print(parameter)
    end


    --dimention
    tensor:size()

    --block comment
    --[[
        block
    --]]

matlab  
    % for loop
    for i = 1:n
    end


    % start index
    1


    % if condition
    if expression
        statements
    elseif expression
        statements
    else
        statements
    end


    % image related
    I = imread(imgName);
    imshow(I);



    % function
    function ret = func(parameter)
    end


    % dimention
    size(mat)
    
