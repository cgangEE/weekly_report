sep23 - sep28
crop bounding-box containing car image in 200G vehicle dataset. [done]
residual net with 50 layers classifying one image need about 500 ms in caffe.
residual net with 34 layers classifying one image need about 150 ms in torch.

sep29 - oct11
nist tattoo detection experiment
    using resnet-18
    100 percent accuracy predicted by choosing best model after cross validation.
    after 90 epoc, 1 false prediction among 2349 images.

attend ali guangzhou airport wifi prediction contest
    season 1 date is from sep 28 to oct 23


oct12 - oct18
nist, flickr tattoo detection experiment
    resnet-18, flickr2349, epcho=20, LR=0.006, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=7.535%
    resnet-18, flickr2349, epcho=30, LR=0.0001, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=6.599%
    resnet-34, flickr2349, epcho=40, LR=0.0001, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=5.705%
    resnet-34, flickr2349, epcho=40, LR=0.00006, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=5.875%

    resnet-18, flickr10000, epcho=20, LR=0.006, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=5.34%
    resnet-18, flickr10000, epcho=30, LR=0.0001, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=5.03%
    resnet-34, flickr10000, epcho=40, LR=0.0001, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=3.77%
    resnet-34, flickr10000, epcho=40, LR=0.00006, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=3.98%
    resnet-50, flickr10000, epcho=40, LR=0.0001, momentum=0.9, weightDecay=1e-4, 1-fold test error rate=3%
    resnet-101, flickr10000, epcho=40, LR=0.0001, momentum=0.9, weightDecay=1e-4, 1-fold test error rate=3.05%

    resnet-18, nist, epcho=20, LR=0.006, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=0.1704%
    resnet-18, nist, epcho=30, LR=0.0001, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=0.0852%
    resnet-34, nist, epcho=40, LR=0.0001, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=0.0426%
    resnet-34, nist, epcho=40, LR=0.00006, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=0.0852%

    resnet-34, nist-flickr, epcho=30, LR=0.0001, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=28.9052%

    resnet-34, flickr-nist, epcho=40, LR=0.0001, momentum=0.9, weightDecay=1e-4, 5-fold test error rate=2.214%



oct18 - oct25
    resnet-152, flickr10000, epcho=40, LR=0.0001, momentum=0.9, weightDecay=1e-4, 1-fold test error rate=2.9%

    resnet-200, flickr10000, epcho=38, LR=0.0001, momentum=0.9, weightDecay=1e-4, 1-fold test error rate=2.6%

    TattDL tested flickr10000 fold1, detected 530 tattoo in 1148 tattoo images,
    detected 9 tattoo in 852 non-tattoo images.
    false negative rate is (1148-530)/1148 = 53.833%
    false positive rate is 9/852 = 1.0563%

    download tattoo segmentation dataset zagreb with 890 images

    wrote a cleaning py script to clean checkpoint folder in fb.resnet.torch 

    use edgebox to generate bounding box for tattoo image   [to do]

    proposal: pre-train with flickr, fine-tune with bounding box [to do]

oct26 - nov01
    fine-tuned a faster r-cnn detector 120 thousand iterators with 80% zagreb dataset
        20% dataset tested gain AP is 0.5541
        precision-recall curve is tattPR-Curve.png

    Because tattDL resize the max edge of input image to 500, it's inconvenient to calculate AP and PR curve [refused]

    there are two plan to get tattoo feature map 
        first: split a image into two 224x224 image, and combine their feature map
        second: write a roi-pooling layer to crop with different size image and gain same size feature map
            [failed] because the sizes of input images are differe, they cannot be combined to one batch
        third (easiest one): remove model's fc layer, just give a random size image to the model, and get the feature map 

nov02 - nov15
    fine-tuned a FCN segmentater after 58000 iterations with 80% zagreb dataset, gain mean IU 0.796 tested from 20% zagreb dataset.

nov15 - nov25
	(1) wrote tattoo annotation tool manual V1.0
	(2) fine-tuned pvanet using end-to-end method with just pedestrian box of 80% train set, testing results with 10% val set is bad.
	(3) fine-tuned faster-rcnn using alternative method with just pedestrian box of 90% trainval set, MAP of testing results with 10% test set is  0.8734582810

nov26 - nov28
	(1) faster r-cnn end2end add cg_ prefix and remove normalize of cls_loss layer, not ok
	(2) faster r-cnn end2end remove cg_ prefix


dec 12 - dec
	fine-tuned pvanet with psdbVeh after 80000 iterations
		net: 0.054s		preproc: 0.018s

		AP = 0.897076
			Recall = 0.740426, Miss Rate = 0.259574 @ FPPI = 0.1
		AP = 0.557737
			Recall = 0.400043, Miss Rate = 0.599957 @ FPPI = 0.1
		AP = 0.819933
			Recall = 0.616888, Miss Rate = 0.383112 @ FPPI = 0.1
		AP = 0.875562
			Recall = 0.699218, Miss Rate = 0.300782 @ FPPI = 0.1
		AP = 0.971466
			Recall = 0.964709, Miss Rate = 0.035291 @ FPPI = 0.1

	compressed above net and the accuracy didn't loss much
		net: 0.039s		preproc: 0.019s

		AP = 0.894791
			Recall = 0.731915, Miss Rate = 0.268085 @ FPPI = 0.1
		AP = 0.549058
			Recall = 0.384686, Miss Rate = 0.615314 @ FPPI = 0.1
		AP = 0.813462
			Recall = 0.607932, Miss Rate = 0.392068 @ FPPI = 0.1
		AP = 0.877224
			Recall = 0.693319, Miss Rate = 0.306681 @ FPPI = 0.1
		AP = 0.971521
			Recall = 0.962580, Miss Rate = 0.037420 @ FPPI = 0.1

	psdb3 combine head, upper body without head, below body to pedestrian box

		for each head find nearest parts, each parts distance < sqrt(400), 
			p(3 parts) > 0.5, ap = 0.574, recall = 0.487 @ FPPI = 0.1	

		for each upper body find nearest parts, each parts distance < sqrt(400), 
			p(3 parts) > 0.5, ap = 0.684, recall = 0.608 @ FPPI = 0.1	
		
		for each upper body find nearest parts, each parts distance <sqrt(1100), 
			p(3 parts) > 0.5, ap = 0.696, recall = 0.631 @ FPPI = 0.1	

		for each below body find nearest parts, each parts distance <sqrt(1100),
			p(3 parts) > 0.5, ap = 0.696, recall = 0.659 @ FPPI = 0.1

		combine 3 generated pedestrian boxes, and use non-maximum supression,
			ap = 0.685, recall = 0.631 @ FPPI = 0.1

